name: Frontend CI Workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches: ['main']
    paths: "frontend/**"

env:
  NODE_VERSION: 18.x

# Jobs defined in the workflow
jobs:
  lint:
    runs-on: ubuntu-latest

    # Only when code in the frontend application changes
    defaults:
      run:
        working-directory: starter/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: install dependency
        run: npm i
      
      - name: Run test eslint
        run: npm run lint -- --fix

  test:
    runs-on: ubuntu-latest

    # Only when code in the frontend application changes
    defaults:
      run:
        working-directory: starter/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: install dependency
        run: npm i
      
      - name: Run test
        run: npm run test

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, Tag, and Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: movie-frontend
          IMAGE_TAG: latest
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSER_NAME }}
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNALIP
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker images

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend

    